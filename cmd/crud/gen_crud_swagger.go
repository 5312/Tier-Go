package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

const (
	modelDir   = "internal/model"
	outputFile = "internal/crud/crud_docs.go"
	modelPkg   = "tier-up/internal/model"
)

func isExported(name string) bool {
	return regexp.MustCompile(`^[A-Z]`).MatchString(name)
}

func main() {
	var models []string

	// 扫描 model 目录下所有 go 文件
	err := filepath.Walk(modelDir, func(path string, info os.FileInfo, err error) error {
		if err != nil || info.IsDir() || !strings.HasSuffix(path, ".go") {
			return nil
		}
		fset := token.NewFileSet()
		node, err := parser.ParseFile(fset, path, nil, parser.ParseComments)
		if err != nil {
			return err
		}
		for _, decl := range node.Decls {
			genDecl, ok := decl.(*ast.GenDecl)
			if !ok || genDecl.Tok != token.TYPE {
				continue
			}
			for _, spec := range genDecl.Specs {
				typeSpec, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}
				if _, ok := typeSpec.Type.(*ast.StructType); ok &&
					isExported(typeSpec.Name.Name) &&
					typeSpec.Name.Name != "Base" {
					models = append(models, typeSpec.Name.Name)
				}
			}
		}
		return nil
	})
	if err != nil {
		panic(err)
	}

	var b strings.Builder
	b.WriteString("// Code generated by gen_crud_swagger.go; DO NOT EDIT.\n")
	b.WriteString("package crud\n\n")
	b.WriteString(`import (
	"github.com/gin-gonic/gin"
	model "` + modelPkg + `"
)

`)

	for _, name := range models {
		lower := strings.ToLower(name)
		path := "/api/v1/" + lower

		// Create
		b.WriteString(fmt.Sprintf(`
// Create%s godoc
// @Summary 创建%s
// @Tags %s
// @Accept json
// @Produce json
// @Param data body model.%s true "%s信息"
// @Success 200 {object} model.%s
// @Router %s/create [post]
func Create%s(c *gin.Context) {
	 
}
`, name, name, name, name, name, name, path, name))

		// Update
		b.WriteString(fmt.Sprintf(`
// Update%s godoc
// @Summary 更新%s
// @Tags %s
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param data body model.%s true "%s信息"
// @Success 200 {object} model.%s
// @Router %s/update/{id} [put]
func Update%s(c *gin.Context) {
	 
}
`, name, name, name, name, name, name, path, name))

		// Delete
		b.WriteString(fmt.Sprintf(`
// Delete%s godoc
// @Summary 删除%s
// @Tags %s
// @Param id path int true "ID"
// @Success 200 {object} map[string]interface{}
// @Router %s/delete/{id} [delete]
func Delete%s(c *gin.Context) {
	 
}
`, name, name, name, path, name))

		// Page/List
		b.WriteString(fmt.Sprintf(`
// Page%s godoc
// @Summary 分页查询%s
// @Tags %s
// @Param page query int false "页码"
// @Param pageSize query int false "每页数量"
// @Success 200 {object} []model.%s
// @Router %s/page [get]
func Page%s(c *gin.Context) {
 
}
`, name, name, name, name, path, name))
	}

	_ = os.WriteFile(outputFile, []byte(b.String()), 0644)
	fmt.Printf("✅ 已生成 %s\n", outputFile)
}
